// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cppLds
double cppLds(double z, NumericVector data, float beta);
RcppExport SEXP _idld_cppLds(SEXP zSEXP, SEXP dataSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cppLds(z, data, beta));
    return rcpp_result_gen;
END_RCPP
}
// cppLdaux
double cppLdaux(NumericVector W, NumericMatrix proyecciones, float beta);
RcppExport SEXP _idld_cppLdaux(SEXP WSEXP, SEXP proyeccionesSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proyecciones(proyeccionesSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cppLdaux(W, proyecciones, beta));
    return rcpp_result_gen;
END_RCPP
}
// cppLdaux2
NumericVector cppLdaux2(NumericMatrix W, NumericMatrix proyecciones, float beta, int q);
RcppExport SEXP _idld_cppLdaux2(SEXP WSEXP, SEXP proyeccionesSEXP, SEXP betaSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proyecciones(proyeccionesSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cppLdaux2(W, proyecciones, beta, q));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatMult
SEXP eigenMatMult(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _idld_eigenMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _idld_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_idld_cppLds", (DL_FUNC) &_idld_cppLds, 3},
    {"_idld_cppLdaux", (DL_FUNC) &_idld_cppLdaux, 3},
    {"_idld_cppLdaux2", (DL_FUNC) &_idld_cppLdaux2, 4},
    {"_idld_eigenMatMult", (DL_FUNC) &_idld_eigenMatMult, 2},
    {"_idld_eigenMapMatMult", (DL_FUNC) &_idld_eigenMapMatMult, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_idld(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
